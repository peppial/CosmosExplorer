@page "/connectionstrings"
@using CosmosExplorer.Core.Models
@using CosmosExplorer.Core
@inject NavigationManager NavigationManager
@inject IStateContainer stateContainer
@inject IJSRuntime JsRuntime

<Modal @ref="modal">
    <Title>Add a new CosmosDB Connection string</Title>
    <Body>
        <p>
            <input @bind="connectionStringName" placeholder="Connection name" cols="" @ref="connectionStringNameRef" />
        </p>
        <p>
            <textarea @bind="connectionString" placeholder="CosmosDb connection string" @ref="connectionStringRef" cols="80" rows="5"></textarea>
        </p>

    </Body>
    <Footer>
        <div class="error">@error </div><br/>
        <button type="button" class="btn btn-primary" @onclick="() => SaveAsync()">Add new</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>

    </Footer>
</Modal>

@code {
    private Modal modal { get; set; }
}

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Connection string</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in stateContainer.ConnectionStrings)
        {
            var style = "";
            if (item.ConnectionString == stateContainer.ConnectionString) style = "background-color:#def0ff;";
            <tr style="@style">
                <td>@item.Name</td>
                <td>@item.ConnectionString</td>
                <td><a href="" @onclick="() => SelectConnectionString(item.ConnectionString)">Select</a></td>
                <td><a href="" @onclick="() => DeleteConnectionStringAsync(item.Name, item.ConnectionString)">Delete</a></td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick="() => modal.Open()">Add New</button>

@code {
    private string connectionStringName = "";
    private string connectionString = "";
    private string error = "";
    private ElementReference connectionStringNameRef;
    private ElementReference connectionStringRef;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && stateContainer.ConnectionStrings.Count==0)
        {
            modal.Open();
            StateHasChanged();
        }
    }


    private async Task SaveAsync()
    {
        error = "";
        if(string.IsNullOrEmpty(connectionStringName))
        {
            error = "Please enter connection string name.";
            await connectionStringNameRef.FocusAsync();
            return;
        }
        if(string.IsNullOrEmpty(connectionString))
        {
            error = "Please enter connection string.";
            await connectionStringRef.FocusAsync();
            return;
        }
        if(stateContainer.ConnectionStrings.Any(c=>c.ConnectionString==connectionString))
        {
            error = "Connection string already exists.";
            await connectionStringRef.FocusAsync();
            return;
        }
        
        stateContainer.ConnectionString = connectionString;
        var strings = stateContainer.ConnectionStrings;
        strings.Add(new PreferenceConnectionString ( connectionStringName, connectionString,true ));
        stateContainer.ConnectionStrings = strings;
        SelectConnectionString(connectionString);
        modal.Close();
        connectionStringName = connectionString = "";
    }

    private void SelectConnectionString(string connectionString)
    {
        stateContainer.ConnectionString = connectionString;
        stateContainer.Database = stateContainer.Container = "";
    }
    private async Task DeleteConnectionStringAsync(string name, string connectionString)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (!confirmed) return;
        
        var strings = stateContainer.ConnectionStrings;
        strings.RemoveAll(item => item.Name==name && item.ConnectionString == connectionString );
        stateContainer.ConnectionStrings = strings;
        if (strings.Count == 0)
        {
            modal.Open();
            return;
        }
        SelectConnectionString(strings[0].ConnectionString);
        NavigationManager.NavigateTo("connectionstrings");
    }
}