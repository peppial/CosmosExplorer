@page "/connectionstrings"
@using CosmosExplorer.Core.Models
@using CosmosExplorer.Core
@inject IStateContainer stateContainer


<Modal @ref="modal">
    <Title>Add a new CosmosDB Connection string</Title>
    <Body>
        <p>
            <input @bind="connectionStringName" placeholder="Connection name" cols="" />
        </p>
        <p>
            <textarea @bind="connectionString" placeholder="CosmosDb connection string" cols="80" rows="5"></textarea>
        </p>

    </Body>
    <Footer>
        <button type="button" class="btn btn-primary"  @onclick="() => Save()">Add new</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>
    </Footer>
</Modal>

@code {
    private Modal modal { get; set; }
}

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Connection string</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in stateContainer.ConnectionStrings)
        {
            var style = "";
            if (item.ConnectionString == stateContainer.ConnectionString) style = "background-color:#def0ff;";
            <tr style="@style" @onclick="() => SelectConnectionString(item.ConnectionString)">
                <td>@item.Name</td>
                <td>@item.ConnectionString</td>

                <td><a href="" @onclick="() => DeleteConnectionString(item.ConnectionString)">Delete</a></td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick="() => modal.Open()">Add New</button>

@code {
    private string connectionStringName { get; set; } = "";
    private string connectionString { get; set; } = "";
    private bool showNew = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && stateContainer.ConnectionStrings.Count==0)
        {
            showNew = true;
            modal.Open();
            StateHasChanged();
        }
    }


    private void Save()
    {
        stateContainer.ConnectionString = connectionString;
        var strings = stateContainer.ConnectionStrings;
        strings.Add(new PreferenceConnectionString { Name = connectionStringName, ConnectionString = connectionString, Selected = true });
        stateContainer.ConnectionStrings = strings;
        connectionStringName = "";
        connectionString = "";
        modal.Close();
    }

    private void SelectConnectionString(string connectionString)
    {
        stateContainer.ConnectionString = connectionString;
        stateContainer.Database = stateContainer.Container = "";
    }
    private void DeleteConnectionString(string connectionString)
    {
        var strings = stateContainer.ConnectionStrings;
        strings.RemoveAll(item => item.ConnectionString == connectionString);
        stateContainer.ConnectionStrings = strings;
        SelectConnectionString("");
    }
}